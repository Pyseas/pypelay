{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>pypelay is a Python package for the automation of S-lay stinger configuration and pipelay analysis using Orcaflex software.</p> <p>It is developed by Pyseas for Sapura Energy Berhad.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#python-environment","title":"Python environment","text":"<p>pypelay is run using Python, and so requires a working Python environment.</p> <p>VS Code is the recommended IDE for running Python. A tutorial for getting started with Python in VS Code is here.</p> <p>It is recommended to follow all steps in the tutorial, including creating a virtual environment.</p>"},{"location":"installation/#pypelay-package","title":"pypelay package","text":"<p>The pypelay package is distributed as a whl file which is installed into the Python environment using pip. Ensure that the virtual environment is activated, for example:</p> <pre><code>(.venv) C:\\Users\\totoro\\my_project&gt;pip install pypelay-0.1.0-py3-none-any.whl\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#pypelay","title":"<code>pypelay</code>","text":""},{"location":"reference/#pypelay.Vessel","title":"<code>Vessel</code>  <code>dataclass</code>","text":"<p>Vessel class.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Vessel name</p> <code>'S1200'</code> <code>draft</code> <code>float</code> <p>Vessel draft in mm</p> <code>7400</code> <p>Examples:</p> <p>vessel = Vessel('S1200', 7400)</p>"},{"location":"reference/#pypelay.init","title":"<code>init()</code>","text":"<p>Copy input files into workspace directory: pipe.dat, options.xlsx and environment.xlsx.</p>"},{"location":"reference/#pypelay.set_radius","title":"<code>set_radius(vessel, num_section, radius, water_depth, tip_clearance, outpath)</code>","text":"<p>Create new dat files for specified vessel and stinger configuration.</p> <p>Two dat files are created: one with pivoting rollers, one (with _dyn suffix) with fixed rollers for use in dynamic analysis.</p> <p>Pipe segmentation and deadband options are specified in options.xlsx.</p> <p>Parameters:</p> Name Type Description Default <code>vessel</code> <code>Vessel</code> <p>Vessel object</p> required <code>num_section</code> <code>int</code> <p>Stinger number of sections</p> required <code>radius</code> <code>float</code> <p>Stinger radius in m</p> required <code>water_depth</code> <code>float</code> <p>Water depth in m</p> required <code>tip_clearance</code> <code>float</code> <p>Pipe-roller clearance at stinger tip in m</p> required <code>outpath</code> <code>Path</code> <p>File path of new dat file</p> required"},{"location":"reference/#pypelay.select_radius","title":"<code>select_radius(vessel, num_section, water_depth, tip_clearance, lcc_target)</code>","text":"<p>Determine optimum stinger radius and create corresponding dat file.</p> <p>Two dat files are created: one with pivoting rollers, one (with _dyn suffix) with fixed rollers for use in dynamic analysis.</p> <p>Pipe segmentation and deadband options are specified in options.xlsx.</p> <p>Parameters:</p> Name Type Description Default <code>vessel</code> <code>Vessel</code> <p>Vessel object</p> required <code>num_section</code> <code>int</code> <p>Stinger number of sections</p> required <code>water_depth</code> <code>float</code> <p>Water depth in m</p> required <code>tip_clearance</code> <code>float</code> <p>Pipe-roller clearance at stinger tip in m</p> required <code>lcc_target</code> <code>float</code> <p>Target F101 LCC utilization in the sag bend</p> required"},{"location":"reference/#pypelay.static_summary","title":"<code>static_summary(outpath, datpaths)</code>","text":""},{"location":"reference/#pypelay.adjust_top_tension","title":"<code>adjust_top_tension(inpath, outpath, tension)</code>","text":"<p>Adjust top tension for an existing stinger configuration.</p> <p>Parameters:</p> Name Type Description Default <code>inpath</code> <code>Path</code> <p>File path of existing dat file</p> required <code>outpath</code> <code>Path</code> <p>File path of new dat file</p> required <code>tension</code> <code>float</code> <p>Target top tension in kN</p> required"},{"location":"reference/#pypelay.write_dxf","title":"<code>write_dxf(datpath)</code>","text":"<p>Create standard stinger configuration drawings in dxf format.</p> <p>Two dxf files are created: one showing the full stinger, the other including just the rollers.</p> <p>The new dxf file paths are modified versions of the input datpath. For example, an input of R120.dat will create R120_ga.dxf and R120_rollers.dxf.</p> <p>Parameters:</p> Name Type Description Default <code>datpath</code> <code>Path</code> <p>File path of Orcaflex dat file</p> required"},{"location":"reference/#pypelay.wave_search","title":"<code>wave_search(ncpu=8)</code>","text":"<p>Identifies design wave windows, based on inputs in environment.xlsx.</p> <p>Parameters:</p> Name Type Description Default <code>ncpu</code> <code>int</code> <p>Number of CPU cores to use</p> <code>8</code>"},{"location":"reference/#pypelay.make_sims","title":"<code>make_sims(base_path)</code>","text":"<p>Create spreadsheet sims.xlsx containing the list of simulations to run.</p> <p>Parameters:</p> Name Type Description Default <code>base_path</code> <code>Path</code> <p>File path of base case Orcaflex dat file</p> required"},{"location":"reference/#pypelay.run_sims","title":"<code>run_sims(ncpu, rerun=None)</code>","text":"<p>Run dynamic simulations in parallel using ncpu CPU cores.</p> <p>If rerun is specified then the specified dat files will be created in rerun folder. For example, rerun=[2, 5] will create dat files LC_00002.dat and LC_00005.dat.</p> <p>Parameters:</p> Name Type Description Default <code>ncpu</code> <code>int</code> <p>Number of CPU cores to use</p> required <code>rerun</code> <code>list[int] | None</code> <p>List of simulation dat files to create</p> <code>None</code>"},{"location":"reference/#pypelay.postprocess","title":"<code>postprocess(outpath)</code>","text":"<p>Postprocess results and write to spreadsheet.</p> <p>Parameters:</p> Name Type Description Default <code>outpath</code> <code>Path</code> <p>File path of output spreadsheet, e.g. dyn_summary.xlsx</p> required"},{"location":"user_guide/","title":"User guide","text":"<p>If you have followed the installation instructions then you have VS Code open in a workspace folder with a virtual environment, into which you've installed the pypelay package.</p> <p>Run the pipelay analysis by following each of the below sections in sequence.</p>"},{"location":"user_guide/#getting-started","title":"Getting started","text":"<p>Create a new python file, e.g. main.py.</p> <p>At the top of the file, import the pypelay and pathlib packages (pathlib is used to specify file system paths):</p> <pre><code>import pypelay\nfrom pathlib import Path\n\nPATH = Path('.')\n</code></pre> <p>Next specify the vessel and its draft:</p> <pre><code>vessel = pypelay.Vessel('S1200', draft=7400)\n</code></pre>"},{"location":"user_guide/#input-files","title":"Input files","text":"<p>pypelay requires several input files containing pipe data, environment and configuration options. Copies of the input files are obtained with:</p> <pre><code>pypelay.init()\n</code></pre> <p>This will copy the below files into your workspace folder. Update the files with your project data.</p> File Format Description pipe.dat Orcaflex Orcaflex dat file containing the pipe linetype options.xlsx Excel Options for pipe segmentation and deadband environment.xlsx Excel Wave and current data"},{"location":"user_guide/#select-stinger-radius","title":"Select stinger radius","text":"<p>The fasest way to obtain the optimum stinger radius is using select_radius:</p> <pre><code>pypelay.select_radius(vessel, num_section=3, water_depth=180,\n                      tip_clearance=0.3, lcc_target=0.3)\n</code></pre> <p>This will create 2 new Orcaflex dat files (one with pivoting rollers, one with fixed rollers) with the automatically selected stinger radius.</p> <p>To obtain a stinger configuration with a specific radius use set_radius:</p> <pre><code>pypelay.set_radius(vessel, num_section=3, radius=120, water_depth=180,\n                   tip_clearance=0.3, outpath=PATH / 'R120.dat')\n</code></pre> <p>After a stinger configuration is created the top tension can be adjusted using adjust_top_tension. Use this function to set top tension to the closet 5t increment.</p> <pre><code>pypelay.adjust_top_tension(PATH / 'R120.dat', PATH / 'R120b.dat',\n                           tension=25*9.81)\n</code></pre> <p>Get the static results for any dat file, or compare multiple configurations using static_summary. This will create a results spreadsheet with one column for each file in datpaths.</p> <pre><code>datpaths = [PATH / f'R120.dat', PATH / f'R120b.dat']\npypelay.static_summary(PATH / 'static_results.xlsx', datpaths)\n</code></pre>"},{"location":"user_guide/#create-drawings","title":"Create drawings","text":"<p>Drawings can be created at any time using write_dxf. Two dxf files are created (one general arrangement, one roller details) based on the input dat file containing the stinger configuration:</p> <pre><code>pypelay.write_dxf(PATH / 'R120.dat')\n</code></pre>"},{"location":"user_guide/#specify-environment","title":"Specify environment","text":"<p>Wave and current data required for dynamic analysis are specified in the spreadsheet environment.xlsx. Inputs are described in the below sections.</p> <p>Populate the wave_search sheet and run the wave_search function:</p> <pre><code>pypelay.wave_search(ncpu=8)\n</code></pre>"},{"location":"user_guide/#sheet-hs_dirn","title":"Sheet: hs_dirn","text":"<p>Dynamic analysis will be run for each Hs and Direction combination. For example 2x Hs and 3x Directions will create 6x combinations.</p> Column Description hs List of Hs values (m) dirn List of directions (deg) dirn_name Name used for grouping results, e.g. 60, 90 and 120 can be named 'beam'"},{"location":"user_guide/#sheet-current","title":"Sheet: current","text":"<p>Dynamic analysis is run for each direction specified in the direction column. A different profile can be specified for each direction, or multiple profiles can be run for a single direction. Current profiles are defined starting at column C.</p> Column Description overall dirn Current direction overall profile Current profile number profile 1 depth Current profile 1 depth profile 1 speed Current profile 1 speed"},{"location":"user_guide/#sheet-wave_search","title":"Sheet: wave_search","text":"<p>Input data required by the wave_search function:</p> Column Description tp Wave peak period (s) gamma JONSWAP peakedness parameter hmax_factor Hmax = hmax_factor * Hs h_tol Hmax tolerance (m) thmax_target Target period of Hmax t_tol thmax tolerance (s) before Number of seconds in dynamic simulation before peak wave occurs after Number of seconds in dynamic simulation after peak wave occurs numseed Number of wave seeds to find"},{"location":"user_guide/#sheet-waves","title":"Sheet: waves","text":"<p>This sheet is automatically created when the user runs the wave_search function.</p>"},{"location":"user_guide/#dynamic-analysis","title":"Dynamic analysis","text":"<p>Create the list of simulations using make_sims:</p> <pre><code>pypelay.make_sims(PATH / 'R120_dyn.dat')\n</code></pre> <p>This will create the spreadsheet sims.xlsx. Open the spreadsheet and confirm the list of simulations is as expected.</p> <p>Run the simulations using run_sims:</p> <pre><code>pypelay.run_sims(ncpu=8)\n</code></pre> <p>This can take a significant amount of time, depending on the number of simulations. On completion, all results are written to the spreadsheet results.xlsx.</p>"},{"location":"user_guide/#post-processing","title":"Post-processing","text":"<p>Post-process the results using postprocess:</p> <pre><code>pypelay.postprocess(PATH / 'dyn_summary.xlsx')\n</code></pre>"}]}